"use strict";

import { WriterControl_UI } from "./WriterControl_UI.js";
import { WriterControl_Paint } from "./WriterControl_Paint.js";
import { DCTools20221228 } from "./DCTools20221228.js";
import { WriterControl_API } from "./WriterControl_API.js";
import { WriterControl_Task } from "./WriterControl_Task.js";
import { WriterControl_Rule } from "./WriterControl_Rule.js";
import { WriterControl_Event } from "./WriterControl_Event.js";
import { WriterControl_Dialog } from "./WriterControl_Dialog.js";
import { WriterControl_DOMPackage } from "./WriterControl_DOMPackage.js";
import { WriterControl_DateTimeControl } from "./WriterControl_DateTimeControl.js";
import { WriterControl_EF } from "./WriterControl_EF.js";
import { WriterControl_DrawFu } from "./WriterControl_DrawFu.js";
import { WriterControl_ToolBar } from "./WriterControl_ToolBar.js";
import { WriterContorl_FlowChart } from "./WriterContorl_FlowChart.js";

export let WriterControl_Main = {

    /** Initialize default string resources */
    InitDefaultResourceStrings: function () {
        /**
        * Global function to set string resource values
        * @param {Object} json String object
        */
        window.__SetDCStringResourceValues = function (json) {
            DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDCSRValues",
                json);
        };
        // Define standard string resources
        window.__DCSR = {
            FixLayoutForPrint: "Cannot modify document layout when in print or print preview mode.",
            FailToDownLoadFontFileForPDFOFD: "Error downloading font file, unable to create PDF/OFD file.",
            NotSupportWriteHtml: "This version does not support outputting HTML data.",
            PromptDeleteRowOrColumn: "Please confirm operation: [Yes] delete table row, [No] delete table column, [Cancel] cancel this delete operation.",
            Waitting: "Please wait...",
            PromptNotDCWriterOFD: "This is not an OFD file generated by DCWriter, unable to open.",
            PromptNotSupportFont: "DCWriter encountered an unsupported font. Please contact the software vendor to update the software to support this font, and copy the font file (ttc or ttf) to the fonts subdirectory on the server.",
            CannotChangeSystemIcon: "Cannot modify system internal icons whose names start with 'System'.",
            AdministratorMode: "Administrator run mode",
            AllFileFilter: "All files|*.*",
            AllowEditPageInfo: "Allow modifying page number midway",
            AllowFixTableRowColumnSize: "Fix table row height and column width",
            AllowUserChangeRows: "Allow users to insert or delete table rows",
            ArgumentOutOfRange_Name_Value_Max_Min: "Parameter “{0}” value is “{1}”, out of range, max value “{2}”, min value “{3}”.",
            AssistInsert: "Quick assist input",
            AutoFitPageSize: "Scale to fit paper size",
            AutoLineViewMode: "Auto line break view mode",
            AutoSave: "Auto save mode",
            AutoSaveLocal: "Auto save based on local file system",
            AutoTranslateForCharacter: "Character auto conversion",
            AutoZoom: "Auto zoom view",
            BackgroundColor: "Background color",
            BackgroundMode: "Background running mode",
            BadParameterValueType_Name_Type_Value: "Parameter “{0}” data type error, type “{1}”, data \"{3}\".",
            Barcode: "1D barcode",
            BeginReadFile_Name: "Start reading file “{0}”.",
            BeginWriteFile_Name_Bytes: "Start writing file “{0}”, data byte length {1}.",
            BothEncryptView: "Content encrypted display",
            BulletedList: "Paragraph list item style",
            ButtonElement: "Button element",
            ButtonNewText: "Button",
            By: "By",
            CADisabledTip: "CA function is disabled. You can set DocumentOptions.SecurityOptions.CAMode to enable this function.",
            CanNotContains_Text: "Cannot contain “{0}”.",
            CheckBoxElement: "Checkbox",
            CheckBoxEventExpressions: "Checkbox event expressions",
            CheckBoxMultiline: "Checkbox text multiline mode",
            CheckBoxValueBinding: "Checkbox data source binding",
            CheckBoxVisualStyle: "Checkbox visual style settings",
            CheckMRIDForbitWhenFail: "Forbid copying content across medical records",
            CheckMRIDNoLimit: "No restriction on copying content across medical records",
            CheckMRIDPromptForbitWhenFail: "Prompt forbidden when copying content across medical records",
            CheckMRIDWarringWhenFail: "Warning when copying content across medical records",
            CheckRequired_Name: "Checkbox group “{0}” must have a checked item.",
            CircleChar: "Circle text",
            CleanFormat: "Clear text format",
            CleanViewMode: "Clean view mode",
            ClearUserTrace: "Batch delete traces",
            ClipboardErrorMessage: " May be caused by real-time monitoring of the system clipboard by security software such as 360.",
            CloneCellComplete: "Table row copy (complete copy)",
            CloneCellContentWithClearField: "Table row copy (structure only)",
            CloneCellDefault: "Table row copy (clear content)",
            CodabarError: "Codabar barcode length must not be less than 3, and must start and end with 'A', 'B', 'C', or 'D'.",
            Code11Error: "Code11 barcode can only contain numbers and character '-'.",
            Code128InvaliData: "Code128: Invalid data or format.",
            Code39InvaliData: "Code39 barcode data error (try Code39Extended barcode).",
            Code93InvaliData: "Code93: Invalid data, contains unsupported characters.",
            ComplexViewMode: "Trace view mode",
            ContentProtectByUser: "Edit permission based on user role",
            ContentProtection: "Element content protection",
            ControlEventMessage: "Enable event messages",
            ControlReadonly: "Document content is read-only",
            Copy: "Copy",
            CopySource: "Content auto copy",
            CoreSystemAlert: "Nanjing Duchang Information Technology Co., Ltd. Reminder",
            CreatorTipFormatString: "{DisplaySavedTime:yyyy-MM-dd HH:mm:ss} created by {Name}",
            CtrlClickToLink: "Hold Ctrl and click to access the link.",
            CurrentDocument: "This document",
            CustomContextMenu: "Custom context menu",
            CustomHandleError: "Custom error handling",
            CustomMessageBox: "Custom message box",
            CustomShapeElement: "Custom drawing shape",
            CustomTraceVisualization: "Trace style settings",
            Cut: "Cut",
            DataObjectRange_Application: "Restrict to copying data only within this process",
            DataObjectRange_OS: "Allow copying data from other processes",
            DataObjectRange_SingleWriterControl: "Restrict to copying data only within this control",
            DCSignInputInfo: "Electronic signature function",
            DCSoftTestVersion: "Nanjing Duchang Technology internal test version",
            DefaultFont: "Default font",
            DelayLoadWhenExpand: "Document section collapse/expand",
            Delete: "Delete",
            DeleteElement_Content: "Delete “{0}“",
            DeleteElements_Count: "Delete {0} elements",
            DeleterTipFormatString: "{DisplaySavedTime:yyyy-MM-dd HH:mm:ss} deleted by {Name}",
            DeleteTableRowOrColumn: "Delete table row or column",
            DeleteRegister: "Registration mark cannot be deleted!!!",
            DisplayFormat: "Value display format",
            DocCompareResult_TickSpan_Num: "Document content comparison took {0} ms, found {1} differences.",
            DocumentBackgroundImage: "Background image",
            DocumentComment: "Comment",
            DocumentGridLine: "Document grid line",
            DocumentNavigator: "Document navigator",
            Downloading_URL: "Downloading “{0}”...",
            EAN13InvaliCountry: "EAN13: Invalid country code.",
            EAN13InvaliData: "EAN13 barcode can only contain 12 or 13 numeric characters.",
            EAN8InvaliData: "EAN8: Invalid data, can only contain 7 or 8 numeric characters.",
            EditControlReadonly: "Editor control is read-only.",
            EditWithUserTrace: "Edit with trace",
            ElementAttributes: "Custom attributes",
            ElementEvent: "Element event",
            ElementIDForEditableDependent_SrcID_TargetID_Result: "Element “{0}” linkage sets element “{1}” ContentReadonly value to “{2}”.",
            ElementType_AccountingNumber: "Accounting number",
            ElementType_Barcode: "Barcode",
            ElementType_Block: "File block ",
            ElementType_Body: "Document body",
            ElementType_Char: "Character",
            ElementType_CheckBox: "Checkbox",
            ElementType_Comment: "Document comment",
            ElementType_ContentLink: "Content link",
            ElementType_ControlHost: "Control host",
            ElementType_Document: "Document",
            ElementType_Footer: "Footer",
            ElementType_FooterForFirstPage: "First page footer",
            ElementType_Header: "Header",
            ElementType_HeaderForFirstPage: "First page header",
            ElementType_HL: "Horizontal line",
            ElementType_Image: "Image",
            ElementType_InputField: "Input field",
            ElementType_Label: "Text label",
            ElementType_LineBreak: "Line break",
            ElementType_Media: "Media",
            ElementType_PageBreak: "Page break",
            ElementType_PageInfo: "Page number",
            ElementType_ParagraphFlag: "Paragraph symbol",
            ElementType_RadioBox: "Radio button",
            ElementType_Sign: "Lock symbol",
            ElementType_Table: "Table",
            ElementType_TableCell: "Cell",
            ElementType_TableColumn: "Table column",
            ElementType_TableRow: "Table row",
            ElementType_TDBarcode: "2D barcode",
            EmphasisMark: "Emphasis mark",
            EncryptProviderNotFind: "Data encryptor not found: {0}.",
            ExcludeKeyword_Keyword: "Prohibited keyword “{0}” found.",
            ExcludeKeywords: "Prohibited keywords",
            ExcludeRange_Range: "Text not included in list “{0}”.",
            EXP_DeciduousTeech: "Deciduous teeth chart",
            EXP_DiseasedTeethBottom: "Diseased lower teeth chart",
            EXP_DiseasedTeethTop: "Diseased upper teeth chart",
            EXP_FetalHeart: "Fetal heart chart",
            EXP_LightPosition: "Light positioning chart",
            EXP_MenstrualHistory: "Menstrual history",
            EXP_PainIndex: "Pain index chart",
            EXP_PDTeech: "PD teeth chart",
            EXP_PermanentTeethBitmap: "Permanent teeth chart",
            EXP_Pupil: "Pupil chart",
            ExtParagraphListStyle: "Extended paragraph list style",
            Fail: "Fail",
            FailToAcceptChildElement_Parent_Child: "Container element {0} cannot accept child element {0}.",
            FieldBackgroundText: "Background text",
            FieldBorderText: "Border text",
            FieldLabelText: "Label text",
            FieldLinkList: "Linked dropdown list",
            FieldSpecifyWidth: "Fixed width",
            FieldUnitText: "Unit text",
            FieldUserEditable: "User cannot directly edit content",
            FileBlockElement: "Document block",
            FilterValue: "Data filter",
            FirstLineIndent: "First line indent",
            Font: "Font",
            FontSize: "Size",
            FontStyle: "Font style (bold, italic, underline, strikethrough)",
            Footer: "Footer",
            FooterForFirstPage: "First page footer",
            ForbidEmpty: "Data cannot be empty.",
            ForeColor: "Text color",
            FormatBrush: "Format painter",
            FormViewMode: "Form view mode",
            FreeEdit: "Free text input",
            GlobalEventTemplate: "Global event template",
            GridLinePreviewText: "DCWriter is a professional electronic medical record document editor independently developed by Nanjing Duchang Information Technology Co., Ltd.",
            Gutter: "Gutter",
            Header: "Header",
            HeaderFooterDifferentFirstPage: "Different header/footer for first page",
            HeaderForFirstPage: "First page header",
            HeaderRowStyle: "Header row mode",
            HiddenTableBorderJumpPrintPage: "Do not print cell border on continued print page",
            HideHeaderFooter: "Hide header/footer for specific pages",
            HorizontalLine: "Horizontal line element",
            HTML_Preview: "HTML preview",
            HTML_Read: "Read HTML file",
            HTML_Write: "Save HTML file",
            HtmlFileFilter: "Html files (*.htm,*.html)|*.htm;*.html",
            I25InvaliData: "I25: Invalid data, must be an even number of numeric characters.",
            IDRepeat_ID: "Duplicate element ID value “{0}” found.",
            ImageAdditionShape: "Image vector icon mark",
            ImageKeepWidthHeightRate: "Set fixed aspect ratio",
            ImagePDF_Write: "Image.PDF format",
            ImageResize: "Image drag resize.",
            ImageSmoothZoom: "Image smooth zoom",
            ImageSource: "Set image source",
            ImageSurroundingsText: "Set text wrapping",
            ImageWaterMark: "Image watermark",
            Input: "Input",
            InputAttributeTableDelete: "Please keep at least one row cell",
            InsertElement_Content: "Insert “{0}”",
            InsertElements_Count: "Insert {0} elements",
            InsertImage: "Insert image",
            InsertOCXControl: "Insert OCX control",
            InsertTableRowOrColumn: "Insert table row/column",
            InsertWin32Control: "Insert control by Win32 handle",
            InsertWinFormControl: "Insert WinForm.NET control",
            InsertWPFControl: "Insert WPF control",
            InvaliBarcodeStyle: "Invalid barcode style.",
            InvalidateCommandName_Name_SimiliarNames: "Invalid command “{0}”, similar supported commands: “{1}”",
            InvalidatePageSettings: "Invalid page settings, please adjust document page settings carefully.",
            ISBNInvaliData: "ISBN: Invalid data, must be 9, 10, 12 or 13 digits, may need to start with “978”.",
            Items_Count: "{0} items.",
            JAN13InvaliData: "JAN13: Must be numeric and start with “49”.",
            JS_DocumentFooter: "Footer",
            JS_DocumentFooterForFirstPage: "First page footer",
            JS_DocumentHeadeForFirstPage: "First page header",
            JS_DocumentHeader: "Header",
            JS_PageBreak: "Page break",
            JsonFilter: "*.json(trial)|*.json",
            JumpPrint: "Continued print",
            KBLibrary: "Insert knowledge base",
            LabelAutoSize: "Text label auto size",
            LabelContactAction: "Text label medical record connection mode",
            LabelMultiLine: "Text label multiline display",
            LabelNewText: "Label text",
            LessThanMinLength_Length: "Text too short, must be at least {0} characters.",
            LessThanMinValue_Value: "Less than minimum value {0}.",
            LimitedFunction: "Limited function",
            LimitPasteTextLength: "Paste text length limit",
            LimitPasteType: "Paste content format limit",
            LineInfo_PageIndex_LineIndex_ColumnIndex: "Page {0} Row {1} Column {2}.",
            LineSpacing: "Line spacing",
            ListEditMode: "Dropdown list",
            LoadComplete_Size: "Load complete, total loaded {0}.",
            Loading_FileName: "Loading file “{0}”...",
            Loading_FileName_Format: "Loading file “{0}” in {1} format...",
            LoadListItems_ProviderType_Name_Num: "Loaded {2} list items for “{1}” using “{0}”.",
            LockFlagElement: "Lock flag element",
            LogicalDeleteUserTrace: "Logical delete trace",
            MaxInputLength: "Max input characters",
            MD5ErrorForDecrypt: "MD5 encoding check failed during data encryption.",
            MegerCell: "Merge/split cell",
            MHT_Write: "Output MHT format",
            MirrorViewForCrossPage: "Cross-page content mirror",
            MissProperty_Name: "Property “{0}” not found.",
            MoreThanMaxDemicalDigits: "Decimal digits exceed limit, max is {0}.",
            MoreThanMaxLength_Length: "Text too long, must not exceed {0} characters.",
            MoreThanMaxValue_Value: "Exceeds max value {0}.",
            MSIInvaliData: "MSI: Must be all numeric characters.",
            MulitiPageContent: "Multi-page different content",
            MultilevelAccessControl: "Multi-level access control",
            MultiLevelTraceVisualization: "Multi-level trace visualization settings",
            MultiLineAutoFixFontSize: "Multiline auto shrink font to fill",
            MustDateTimeType: "Must be date-time format.",
            MustDateType: "Must be date format.",
            MustInteger: "Must be integer.",
            MustMatch_Expression: "Must match format “{0}”.",
            MustNumeric: "Must be numeric.",
            MustTimeType: "Must be time format.",
            NeedSetOwnerDocument: "Need to set OwnerDocument property value first.",
            NoDocument: "No document.",
            NoImage: "No image",
            NoneEncryptView: "Display without encryption",
            NormalViewMode: "Normal view mode",
            NotSupportInThisVersion_Name: "Feature “{0}” is not supported in this version.",
            NotSupportSerialize_Format: "Storage in “{0}” format is not supported.",
            NotSupportSerializeText_Format: "Storing as “{0}” file format in plain text is not supported.",
            NotSupportTransparentEncrypt: "Software license does not include transparent encryption. Please contact the software vendor.",
            NotSupportWrite_Format: "Saving files in “{0}” format is not supported.",
            NumberedList: "Numbered list style",
            NumicalEditMode: "Numeric input box",
            OffsetJumpPrint: "Offset continued print",
            OLEDrag: "OLE drag",
            OwnerDocumentNUll: "Document element does not belong to any document, operation cannot be performed.",
            PageBorderBackgroundFormat: "Page border and shading",
            PageBottomMargin: "Bottom margin",
            PageBreak: "Page break",
            PageIndexsForPrintBackgroundImage: "Specify page numbers to print background image and watermark",
            PageInfoAdvancedStyle: "Advanced display style",
            PageInfoAutoHeight: "Auto height",
            PageInfoElement: "Basic function",
            PageLandscape: "Print orientation",
            PageLeftMargin: "Left margin",
            PageMargin: "Page margin",
            PageRightMargin: "Right margin",
            PageSettingsBase: "Paper settings",
            PageStateLocked: "The paging state of the current document is locked, unable to re-paginate. Do not call functions such as RefreshPages()/RefreshDocument()/UpdateDocumentView()/EditorRefreshView() that may cause re-pagination at this time.",
            PageTopMargin: "Top margin",
            PageViewMode: "Page view mode",
            ParagraphFirstLineIndent: "First line indent",
            ParagraphLeftIndent: "Left indent",
            ParagraphSpacing: "Paragraph spacing",
            PartialEncryptView: "Content encrypted display",
            Paste: "Paste",
            PDF_Write: "Save as PDF format",
            POSPrinter: "Support POS printer",
            PostnetError: "Postnet barcode text must be 5, 6, 9, or 11 digits.",
            PrintBoundSelection: "Area selection print",
            PrintClean: "Clean print",
            PrintMultiDocuments: "Multi-document merge mode",
            PrintMultiDocumentsMixed: "Multi-document mixed mode",
            PrintPreview: "Print preview",
            PrintPreviewMultiColumn: "Double page side by side",
            PrintPreviewZoom: "Print preview zoom",
            PrintSelection: "Print selected content",
            PrintSettingForNotChecked: "Checkbox print status setting",
            PrintSingleDocument: "Single document print mode",
            PrintSpecifyPages: "Print specified pages",
            PrintTrace: "Trace print",
            PrintWithManualDuplex: "Manual duplex print",
            PromptCannotEditComment_AuthorID: "Cannot edit this document comment because it was created by “{0}”.",
            PromptDisableOSClipboardData: "Program prohibits obtaining data from outside.",
            PromptForbitPasteMRID_ID_SourceID: "Warning: The current document is associated with number “{0}”, and the content to be pasted is associated with number “{1}”. According to the specification, this operation is forbidden.",
            PromptJumpStartForSearch: "Reached the end of the document, continue searching from the beginning?",
            PromptMaxTextLengthForPaste_Length: "System is set to not accept more than {0} characters when pasting or inserting content.",
            PromptProtectedContent: "Some content is protected, operation is restricted or cannot be performed.",
            PromptRejectFormat_Format: "System is set to reject data in “{0}” format.",
            PropertyCannotHasParameter_Name: "Property “{0}” cannot have parameters.",
            PropertyIsReadonly_Name: "Property “{0}” is read-only.",
            PropertyValueExpressions: "Element property value expressions",
            QRCode: "QR code",
            ReadonlyCannotAcceptElementType_ParentType_ChildType: "Element of type {0} cannot accept child element of type {1}.",
            ReadonlyCanNotDeleteBackgroundText: "Cannot delete background text of input field.",
            ReadonlyCanNotDeleteBorderElement: "Cannot delete border element of input field.",
            ReadonlyCanNotDeleteLastParagraphFlag: "Cannot delete the last paragraph symbol at any time.",
            ReadonlyContainerReadonly: "Container element is set to content read-only.",
            ReadonlyContentLocked: "Content is locked.",
            ReadonlyContentProtect: "Content is read-only due to forced content protection.",
            ReadonlyElementMarkUndeleteable_ID: "Element “{0}” is marked as undeletable.",
            ReadonlyFormViewMode: "Document element is read-only because the control is in form mode.",
            ReadonlyForSameLevelContent: "Content of the same level user is read-only.",
            ReadonlyInputFieldUserEditable_ID: "Content of input field [{0}] is set to not directly editable.",
            ReadonlyLogicDeleted: "Content has been logically deleted and cannot be deleted again.",
            ReadonlyLowPermissionLevel_CurLevel_NeedLevel: "Insufficient permission level, current level is {0}, required level is {1}.",
            ReadonlyPermission: "Content is read-only due to authorization control.",
            RecommentDocumentGridLine: "This command is obsolete. Please use the document grid line function in the page setup dialog, or set document.PageSettings.DocumentGridLine property.",
            RectangleChar: "Rectangle text",
            Redo: "Redo",
            RequiredChecked: "Required check setting",
            RowExistInTable: "Table row already exists in the table.",
            RTF_Read: "Read RTF format",
            RTF_Write: "Save RTF format",
            RTFFileFilter: "RTF files (*.rtf)|*.rtf",
            S25InvaliData: "S25: Must be all numeric characters.",
            SaveLongImage: "Save document content as a long image",
            SavePageImage: "Save document content as paged images",
            ScreenSnapshort: "Insert screenshot",
            ScriptItems_Count: "{0} script items.",
            SearchReplaceNotFound: "Cannot find the content you are looking for",
            SectionBorderBackgroundFormat: "Set border and shading",
            SectionElement: "Insert document section",
            SetCustomIcon: "Custom internal icon",
            SetResourceString: "Custom string resource",
            ShowFormButton: "Show form button",
            ShowInputFieldStateTag: "Input field content state tag",
            SingleLineAutoFixFontSize: "Single line auto shrink font to fill",
            SpecifyPaste: "Selective paste",
            SpecifyRowHeight: "Table row fixed height",
            SpecharsHasHtml: "Your string contains html tags. Note: html tags will not take effect",
            SubfieldMode: "Auto column",
            SupSubscript: "Superscript/subscript",
            SynchroServerTime: "Server time synchronization",
            SystemAlert: "System prompt",
            SystemInternalError: "System internal error",
            TableCellDataSource: "Cell data source binding",
            TableCellGridLine: "Cell grid line",
            TableCellSlantSplitLineStyle: "Cell diagonal line",
            TableCellValueValidate: "Cell content validation",
            TableCellVertialAlign: "Cell vertical alignment",
            TableElement: "Table basic function",
            TableRowClolumnMastBePositiveInteger: "Table row and column count must be positive integers and cannot be empty",
            TableRowCanSplitByPageLine: "Set same row content to cross page",
            TableRowDataSource: "Table row data source binding",
            TableRowNewPageMode: "Table row set forced page break",
            TerminalLine: "Page blank placeholder diagonal line",
            TerminalLine2: "Page blank placeholder anti-diagonal line",
            TerminalLineS: "Page blank placeholder S line",
            TerminalText: "Page blank placeholder character",
            TextEditMode: "Input field text input mode",
            TextMustNotNull: "Barcode text must not be empty.",
            TextWaterMark: "Text watermark",
            TimeEditMode: "Input field time input mode",
            TimeLineViewMode: "Timeline view mode",
            TipTitle: "System prompt",
            TitleLevel: "Outline",
            TooltipText: "Tooltip text",
            TransparentEncrypt: "Transparent encryption",
            TXT_Read: "Read TXT format",
            TXT_Write: "Save TXT format",
            TXTFileFilter: "TXT files (*.txt)|*.txt",
            Undo: "Undo",
            UnknowDecryptError: "Data decryption failed for unknown reason.",
            UPCAInvaliCountry: "UPCA: Invalid country code.",
            UPCAInvaliData: "UPCA: Must be 12 digits.",
            UPCEInvaliData: "UPCE: Must be 8 or 12 digits, may need to start with 0 or 1.",
            UPCS2InvaliData: "UPCS2: Must be 2 digits.",
            UPCS5InvaliData: "UPCS5: Must be 5 digits.",
            UserDeleteable: "User cannot directly delete",
            UserHandleReadFileEvent_FileName_Result: "User handled read file \"{0}\" event, returned {1}.",
            UserHandleWriteFileEvent_Result: "User handled write file event, returned {0}.",
            UserTrackList: "Trace list",
            ValueBinding: "Data source binding",
            ValueExpression: "Value expression",
            ValueInvalidate: "Data validation error",
            ValueInvalidate_Source_Value_Result: "Object “{0}” content is “{1}”, data validation error “{2}”.",
            ValueValidate: "Data validation",
            ValueValidateFail: "Data validation failed.",
            ValueValidateOK: "Data validation succeeded.",
            ValueValidateWithCreateDocumentComments: "Data validation with document comments",
            VBScript: "VB or JS script",
            VideoElement: "Video element",
            ViewXMLSource: "View XML source code function",
            WarringPasteMRID_ID_SourceID: "Warning: The current document is associated with number “{0}”, and the content to be pasted is associated with number “{1}”. According to the specification, it is not recommended to perform this operation. Continue?",
            WatermarkRepeat: "Watermark repeat display",
            WhereToCopy: "Where to copy?",
            WhereToMove: "Where to move?",
            XML_Read: "Read XML format",
            XML_Write: "Save XML format",
            XML2022Filter: "2022 XML file (trial)|*.xml",
            XMLFilter: "XML files|*.xml",
            XTextChartElement: "Pie chart and chart",
            Zoom: "View smooth zoom",
            ZOrderStyle: "Stamp image before or after text",
        };
        window.__SetDCStringResourceValues(window.__DCSR);
    },

    /**
     * All DCWriter C# modules are loaded, then automatically initialize all editor control objects
     */
    StartGlobal: function () {
        // Set default fonts
        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDefaultFont", 30, 128, "Microsoft Sans Serif");
        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDefaultFont", 0xf00, 0xfff, "Microsoft Himalaya");
        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDefaultFont", 19968, 40869, "SimSun");
        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDefaultFont", 8731, 8731, "Segoe UI Symbol");

        //DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetDefaultFont", 32, 65510, "Arial Unicode MS");

        // Set replacement characters
        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "AddReplaceCharsForLoad", 10004/* ✔ */, 8730 /*√ */);

        DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "SetGlobalServicePageUrl",
            DCTools20221228.GetServicePageUrl(null),
            DCTools20221228.GetClientID());

        WriterControl_Paint.RefreshStandardImageList();
        if (window.queryLocalFonts) {
            try {
                // Try to get local font name list
                window.queryLocalFonts().then(function (list2) {
                    if (list2.length > 0) {
                        var localFontNames = new Array();
                        for (const item2 of list2) {
                            if (localFontNames.indexOf(item2.family) == false) {
                                localFontNames.push(item2.family);
                            }
                        }
                        window.__DCLocalFontNames = localFontNames;
                    }
                    else {
                        window.__LocalFontsErrorFlag = true;
                    }
                }).catch((err) => {
                    window.__LocalFontsErrorFlag = true;
                    console.log(err);
                });
            }
            catch (ext) {
                window.__LocalFontsErrorFlag = true;
            }
        }
        window.__DCWriter5FullLoaded = true;
        var divs = document.querySelectorAll("div[dctype='WriterControlForWASM'],div[dctype='WriterPrintPreviewControlForWASM']");
        if (divs != null && divs.length > 0) {
            for (var iCount = 0; iCount < divs.length; iCount++) {
                var div = divs[iCount];
                if (div.__DCWriterReference == null) {
                    WriterControl_Event.RaiseControlEvent(div, 'EventBeforeCreateControl');
                    // Check if attribute autoCreateControl = false exists  DUWRITER5_0-861
                    var hasAutoCreateControlAttr = div.getAttribute("autocreatecontrol");// Get the value of autocreatecontrol attribute on DIV element
                    if (hasAutoCreateControlAttr != null) {
                        hasAutoCreateControlAttr = hasAutoCreateControlAttr.trim().toLowerCase();
                    }
                    // !== does not compare different types, and has no result, only compares same type;
                    // The following judgment means that if autocreatecontrol attribute is not 'false' or 'False' and there is no AboutControl, the editor is automatically created
                    if (hasAutoCreateControlAttr != 'false' && !div.AboutControl) {
                        WriterControl_Main.CreateWriterControlForWASM(div);
                    }
                }
            }
        }
        var temperatureDivs = document.querySelectorAll("div[dctype = 'DCTemperatureControlForWASM']");
        window.StartGlobal = true;
        if (temperatureDivs != null && temperatureDivs.length > 0) {
            for (var iCount = 0; iCount < temperatureDivs.length; iCount++) {
                var div = temperatureDivs[iCount];
                if (div.__DCWriterReference == null) {
                    div.CreateTemperatureControlForWASM = WriterControl_Main.CreateWriterControlForWASM;
                    if (typeof div.LoadStartGlobal == "function") {
                        div.LoadStartGlobal(div);
                    }
                }
            }
        }

        // Labor chart
        var flowDivs = document.querySelectorAll("div[dctype='DCFlowControlForWASM']");
        window.StartGlobal = true;
        if (flowDivs != null && flowDivs.length > 0) {
            for (var iCount = 0; iCount < flowDivs.length; iCount++) {
                var div = flowDivs[iCount];
                if (div.__DCWriterReference == null) {
                    console.log("Create flow control");
                    div.CreateFlowControlForWASM = WriterControl_Main.CreateWriterControlForWASM;
                    if (typeof div.LoadStartGlobal == "function") {
                        div.LoadStartGlobal(div);
                    }
                }
            }
        }

        // Trigger global DCWriter5Started event
        var handler = window["DCWriter5Started"];
        if (typeof (handler) == "function") {
            handler();
        }

        // Method to create background editor document object here wyc20240710
        window.CreateDCWriterControlDocument = function () {
            var div = document.createElement("div");
            var tempid = "hiddenDCWriterControlForDom";
            div.id = tempid;
            div.setAttribute("dctype", "WriterControlForWASM");
            div.setAttribute("style", "display:none");
            document.body.appendChild(div);
            WriterControl_Main.CreateWriterControlForWASM(tempid);
            var doc = DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "CreateDCWriterControlDocument", div.__DCWriterReference);
            if (doc != null) {
                WriterControl_API.BindDCWriterDocument(doc);
                doc.OwnerControl = div;
            }
            //document.body.removeChild(div);
            return doc;

        };
    },

    /**
     * Create editor instance
     * @param {string | HTMLDivElement} strContainerID Container HTML element ID or object
     */
    CreateWriterControlForWASM: function (strContainerID, type) {
        if (window.__DCWriter5FullLoaded != true) {
            // Editor creation failed
            if (!!window.WriterControl_OnLoadError && typeof (window.WriterControl_OnLoadError) == "function") {
                window.WriterControl_OnLoadError.call(strContainerID, strContainerID);
            }
            throw "DCWriter5 function modules are not fully loaded, unable to create editor control for now.";
        }
        var strRuntimeID = strContainerID;
        if (typeof strContainerID == "object") {
            strRuntimeID = strContainerID.id;
            // The element hosting the editor may be in an iframe
            if (window.__DCWriterControls == null) {
                window.__DCWriterControls = new Array();
            }
            if (strContainerID.ownerDocument != document) {
                strRuntimeID = "!" + new Date().valueOf() + Math.random();
                window.__DCWriterControls[strRuntimeID] = strContainerID;
            }
            else if (DCTools20221228.IsNullOrEmptyString(strRuntimeID)) {
                // If no ID value is provided, use internal ID value
                strRuntimeID = "DC_" + new Date().valueOf() + Math.random();
                window.__DCWriterControls[strRuntimeID] = strContainerID;
            }
        }
        var rootElement = DCTools20221228.GetOwnerWriterControl(strContainerID);
        if (rootElement == null) {
            // Editor creation failed
            if (!!window.WriterControl_OnLoadError && typeof (window.WriterControl_OnLoadError) == "function") {
                window.WriterControl_OnLoadError.call(strContainerID, strContainerID);
            }
            return null;
        }

        // Here, judge the value of RuleVisible
        rootElement.ruleVisible = rootElement.getAttribute('rulevisible');
        if (rootElement.ruleVisible != null && typeof rootElement.ruleVisible == 'string' && rootElement.ruleVisible.indexOf(',') > 0) {
            // Parse ruleVisible
            rootElement.ruleVisible = rootElement.ruleVisible.split(',');
            if (rootElement.ruleVisible && rootElement.ruleVisible.length == 2) {
                if (rootElement.ruleVisible[0].toLowerCase().trim() == 'false' && rootElement.ruleVisible[1].toLowerCase().trim() == 'false') {
                    rootElement.setAttribute('rulevisible', 'false');
                } else {
                    rootElement.setAttribute('rulevisible', 'true');
                }
            }
        }

        ////zhangbin 20230927 Record all rootElements initialized by this method here
        //if(typeof rootElement == 'object'){
        //    if(Array.isArray(DCTools20221228.CreateWriterControlArr) === false){
        //        DCTools20221228.CreateWriterControlArr = [];
        //    }
        //    DCTools20221228.CreateWriterControlArr.push(rootElement);
        //}
        //if (rootElement.id == null || rootElement.id.length == 0) {
        //    rootElement.id = "dcwriter_" + new Date().valueOf();
        //}
        rootElement.__BKImgStyleName = "__dcbkimg_" + parseInt(Math.random() * 1000000);
        DCTools20221228.LogTick("Initialize control" + rootElement.id);

        try {
            // Store the milliseconds spent loading the document, used for the performance page
            let indexPerformanceTiming = {};
            if (window.localStorage.getItem('indexPerformanceTiming')) {
                indexPerformanceTiming = {
                    ...JSON.parse(window.localStorage.getItem('indexPerformanceTiming'))
                };
            }
            indexPerformanceTiming['myWriterControl'] = {
                ...(indexPerformanceTiming.myWriterControl || {}),
                [rootElement.id]: {
                    startTime: (new Date()).valueOf(),
                }
            };
            window.localStorage.setItem('indexPerformanceTiming', JSON.stringify(indexPerformanceTiming));
        } catch (error) {

        }

        /** Whether the editor has already been created */
        var rootElementIsCreated = rootElement.__DCWriterReference != null;

        var nativeControl = DotNet.invokeMethod(window.DCWriterEntryPointAssemblyName, "CreateWriterControlForWASM",
            strRuntimeID);
        if (nativeControl == null) {
            // Editor creation failed
            if (!!window.WriterControl_OnLoadError && typeof (window.WriterControl_OnLoadError) == "function") {
                window.WriterControl_OnLoadError.call(rootElement, rootElement);
            }
            return null;
        }
        rootElement.__DCWriterReference = nativeControl;
        nativeControl.invokeMethod("set_WASMBaseZoomRate", window.devicePixelRatio);
        rootElement.CheckDisposed = function () {
            if (rootElement.__DCDisposed == true) {
                throw "DCWriter editor control {" + rootElement.id + "} has been disposed and cannot be used.";
            }
        };
        if (rootElement.getAttribute("enabledlogapi") == "true") {
            // Record API calls
            WriterControl_UI.StartAPILogRecord(rootElement, true);
        }
        var allchild = rootElement.childNodes;
        allchild = Array.prototype.slice.call(allchild);
        allchild.forEach((childEle) => {
            if (childEle.nodeName == "#text") {
                rootElement.removeChild(childEle);
            }
        })
        var strProductVersion = nativeControl.invokeMethod("GetProductVersion");
        //rootElement.setAttribute("dctype", "WriterControlForWASM");
        rootElement.setAttribute("dcversion", strProductVersion);
        console.log("DCWriter5 software release time:" + strProductVersion);
        if (rootElementIsCreated == false) {
            // If not created, create directly
            if (rootElement.getAttribute("dctype") == "WriterPrintPreviewControlForWASM") {
                WriterControl_API.BindControlForCommon(rootElement, rootElement.__DCWriterReference);
                // Add members for print preview control
                WriterControl_API.BindControlForWriterPrintPreviewControlForWASM(rootElement, rootElement.__DCWriterReference);
            } else {
                WriterControl_API.BindControlForCommon(rootElement, rootElement.__DCWriterReference);
                // Add members for editor control
                WriterControl_API.BindControlForWriterControlForWASM(rootElement, rootElement.__DCWriterReference);
            }
        }

        // Load system configuration
        for (var iCount = 0; iCount < rootElement.attributes.length; iCount++) {
            var attr = rootElement.attributes[iCount];
            rootElement.__DCWriterReference.invokeMethod("LoadConfigByHtmlAttribute",
                attr.name,
                attr.value);
        }
        rootElement.DocumentOptions = nativeControl.invokeMethod("GetDocumentOptions");
        //zhangbin 20230201 Check if custom height exists, if not, set to 600px by default 
        if (rootElement.style.height == '') {
            rootElement.style.height = '100%';
        }

        // Remove event listener to prevent duplicate addition
        rootElement.ownerDocument.body.removeEventListener('mousedown', WriterControl_UI.OwnerDocumentBodyMouseDownFunc);
        // This method is used to handle closing dropdown and caret
        rootElement.ownerDocument.body.addEventListener('mousedown', WriterControl_UI.OwnerDocumentBodyMouseDownFunc);

        // Disable browser default right-click
        rootElement.addEventListener('contextmenu', function (e) {
            e.stopPropagation();
            e.preventDefault();
            e.returnValue = false;
            return false;
        });

        if (rootElement.CustomFontFamily) {
            DCTools20221228.LoadCustomFont(rootElement, false);
        }

        rootElement.ownerDocument.body.oncut = function (e) {
            // Fix the problem that cut does not work when there are multiple editors [DUWRITER5_0-3618]
            var srcElement = e.srcElement || e.target;
            var rootElement = this.ownerDocument.WriterControl || DCTools20221228.GetOwnerWriterControl(srcElement);
            if (rootElement == null) {
                return;
            }
            // 20240313 [DUWRITER5_0-2031] lxy If the property dialog exists, do not perform editor cut
            var dc_dialogContainer = rootElement.ownerDocument.getElementById('dc_dialogContainer');
            if (dc_dialogContainer) {
                return true;
            }
            // In document, check if there is selection in the same group, if so, clear and also clear selection
            var rootEle = rootElement;
        
            if (rootEle == null || rootEle.ownerDocument.documentElement.contains(rootEle) == false) {
                // When the editor element is not in the document, copy and cut follow the default logic [DUWRITER5_0-2449]
                return;
            }
            // Check if there is selection on window, if so, execute directly
            // Fix the problem of selection range error when using iframe nested cut and copy [DUWRITER5_0-4199]
            var sel;
            try {
                var e_window = rootEle.ownerDocument && rootEle.ownerDocument.defaultView;
                if (e_window && typeof e_window.getSelection === "function") {
                    sel = e_window.getSelection();
                } else if (typeof window.getSelection === "function") {
                    sel = window.getSelection();
                } else {
                    sel = null;
                }
            } catch (error) {
                // console.error("Error getting selection:", error);
                sel = null;
            }
            // Check if divCaret element exists
            if (sel && sel.isCollapsed === true && rootEle.__DCWriterReference.invokeMethod("HasSelection") == true) {
                var datas = '';
                var ref9 = rootEle.__DCWriterReference;
                if (ref9 != null) {
                    datas = ref9.invokeMethod("DoCut", false, false);
                }
                WriterControl_UI.SetClipboardData(datas, e, 'cut', rootEle);
                e.stopPropagation();
                e.preventDefault();
                e.returnValue = false;
            }
        };

        rootElement.ownerDocument.body.oncopy = function (e) {
            var srcElement = e.srcElement || e.target;
            var rootElement = this.ownerDocument.WriterControl || DCTools20221228.GetOwnerWriterControl(srcElement);
            if (rootElement == null) {
                return;
            }
            // 20240313 [DUWRITER5_0-2031] lxy If the property dialog exists, do not perform editor copy
            var dc_dialogContainer = rootElement.ownerDocument.getElementById('dc_dialogContainer');
            if (dc_dialogContainer) {
                return true;
            }
            // In document, check if there is selection in the same group, if so, clear and also clear selection
            var rootEle = rootElement;
            if (rootEle == null || rootEle.ownerDocument.documentElement.contains(rootEle) == false) {
                // When the editor element is not in the document, copy and cut follow the default logic [DUWRITER5_0-2449]
                return;
            }
            // Check if there is selection on window, if so, execute directly
            // Fix the problem of selection range error when using iframe nested cut and copy [DUWRITER5_0-4199]
            var sel;
            try {
                var e_window = rootEle.ownerDocument && rootEle.ownerDocument.defaultView;
                if (e_window && typeof e_window.getSelection === "function") {
                    sel = e_window.getSelection();
                } else if (typeof window.getSelection === "function") {
                    sel = window.getSelection();
                } else {
                    sel = null;
                }
            } catch (error) {
                // console.error("Error getting selection:", error);
                sel = null;
            }
            // In print preview, only handle copy logic when selecting editor text, do not handle in other scenarios [DUWRITER5_0-3894]
            if (rootEle.IsPrintPreview() == true) {
                // Print preview control
                var PrintPrewViewPageContainer = DCTools20221228.GetChildNodeByDCType(rootEle, "page-printpreview");
                if (sel && sel.isCollapsed === false && sel.rangeCount == 1 && typeof (sel.getRangeAt) == "function") {
                    var range = sel.getRangeAt(0);
                    if (range && range.commonAncestorContainer && typeof (range.cloneContents) == "function") {
                        var commonAncestorContainer = range.commonAncestorContainer;
                        if (PrintPrewViewPageContainer.contains(commonAncestorContainer) == true) {
                            // Print preview control triggers EventBeforeCopy event, data is currently {IsPrintPreview: true} [DUWRITER5_0-3931]
                            if (rootEle.EventBeforeCopy != null && typeof (rootEle.EventBeforeCopy) == "function") {
                                var data = {
                                    IsPrintPreview: true
                                };
                                var CoptResult = rootElement.EventBeforeCopy(e, data);
                                if (CoptResult == false) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    return false;
                                }
                            }
                            /** Copied content */
                            var clipboardText;
                            /** Clipboard data object */
                            var clipboardData = e.clipboardData || window.clipboardData;
                            var clonedRange = range.cloneContents();
                            var divNode = document.createElement("div");
                            divNode.appendChild(clonedRange);
                            // Filter out unwanted content
                            var removeNodes = divNode.querySelectorAll("[user-select='none'],style");
                            if (removeNodes.length > 0) {
                                for (var i = 0; i < removeNodes.length; i++) {
                                    var removeNode = removeNodes[i];
                                    removeNode.parentNode.removeChild(removeNode);
                                }
                            }
                            var textNodes = divNode.querySelectorAll("text");
                            if (textNodes.length > 0) {
                                var NowY = textNodes[0].getAttribute("y");
                                var text = "";
                                for (var i = 0; i < textNodes.length; i++) {
                                    var textNode = textNodes[i];
                                    var textNodeY = textNode.getAttribute("y");
                                    // Determine if text tags are on the same line
                                    // If not on the same line, wrap
                                    if (NowY != textNodeY) {
                                        NowY = textNodeY;
                                        text += "\n";
                                    }
                                    text += textNode.innerHTML.replace(/&nbsp;/g, " ");
                                }
                                if (text != "") {
                                    clipboardText = text;
                                }
                            }

                            // Here, add another judgment for the case of copying a string
                            var hasText = divNode.childNodes;
                            if (hasText.length > 0) {
                                try {
                                    var newText = "";
                                    hasText.forEach(item => {
                                        if (item.nodeName != "#text") {
                                            throw new Error("");
                                        }
                                    })
                                    // In the case of plain text, perform this operation
                                    newText = divNode.innerHTML.replace(/&nbsp;/g, " ");
                                    if (newText != "" && !clipboardText) {
                                        clipboardText = newText;
                                    }
                                } catch (err) {

                                }
                            }
                            if (clipboardText && clipboardData) {
                                clipboardData.setData("text/plain", clipboardText);
                                divNode = null;
                                e.preventDefault();
                                return false;
                            }
                            divNode = null;
                        }
                    }
                }
            }

            if (sel && sel.isCollapsed === true && rootEle.__DCWriterReference.invokeMethod("HasSelection") == true) {
                // Selection exists
                var datas = '';
                var ref9 = rootEle.__DCWriterReference;
                if (ref9 != null) {
                    datas = ref9.invokeMethod("DoCopy", false);
                }
                WriterControl_UI.SetClipboardData(datas, e, 'copy', rootEle);
                e.stopPropagation();
                e.preventDefault();
                e.returnValue = false;
            }
        };

        // Enable monitoring
        /**
         * 
         * @param {any} message Error text
         * @param {any} source  Resource where the error occurred
         * @param {any} lineno  Line where the error occurred
         * @param {any} colno   Column where the error occurred
         * @param {any} error   Detailed information
         */
        window.onerror = function (message, source, lineno, colno, error) {
            //var hasFrameWork = false;
            // Here, judge whether source contains _framework
            //if (source != null && typeof source == 'string') {
            //    if (source.indexOf('_framework') >= 0) {
            //        hasFrameWork = true;
            //    }
            //}
            if (rootElement.EventOnError && typeof rootElement.EventOnError == 'function') {
                var options = {
                    message,
                    source,
                    lineno,
                    colno,
                    error
                };
                var needLogError = rootElement.EventOnError(options);
                if (needLogError === false) {
                    // Here, handle console to display errors, default is to display
                    return true;
                }
            }
        };

        // When the entire window loses focus, also need to lose focus
        // Determine if it is mobile
        if (rootElement.ownerDocument && !(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
            window.addEventListener('onblur', function () {
                var dropdown = rootElement.querySelector('#divDropdownContainer20230111');
                if (dropdown != null) {
                    dropdown.CloseDropdown();
                }
                // Close table dropdown input field
                var dropdownTable = rootElement.querySelector(`#DCTableControl20240625151400`);
                if (dropdownTable && dropdownTable.CloseDropdownTable) {
                    dropdownTable.CloseDropdownTable();
                }


                WriterControl_UI.HideCaret(rootElement);
            });
        };

        //zhangbin 20230607 Listen for size changes of the outermost wrapping div element
        rootElement.resizeObserver = new ResizeObserver(entries => {
            if (rootElement.ownerDocument && !(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                var dropdown = rootElement.querySelector('#divDropdownContainer20230111');
                // When rootElement size changes, close dropdown
                if (dropdown != null) {
                    dropdown.CloseDropdown();
                }
                // Close table dropdown input field
                var dropdownTable = rootElement.querySelector(`#DCTableControl20240625151400`);
                if (dropdownTable && dropdownTable.CloseDropdownTable) {
                    dropdownTable.CloseDropdownTable();
                }
                WriterControl_UI.HideCaret(rootElement);
                // Here, judge and handle ruler position when the outermost wrapper size changes
                WriterControl_Rule.InvalidateView(rootElement, "hrule");
                WriterControl_Rule.InvalidateView(rootElement, "vrule");
                // Here, if the element is not displayed on the page, do not execute size change listener
                if (rootElement.getClientRects) {
                    if (rootElement.getClientRects().length > 0) {
                        rootElement.SetAutoZoom(WriterControl_Event.InnerRaiseEvent, 'EventDocumentResize', true);
                    }
                } else {
                    rootElement.SetAutoZoom(WriterControl_Event.InnerRaiseEvent, 'EventDocumentResize', true);
                }
                if (rootElement.IsWriterPrintPreviewControlForWASM != true) {
                    WriterControl_Paint.HandleScrollView(rootElement, true);
                    WriterControl_UI.ReloadHostControls(rootElement);
                }
                // Judge whether area selection exists // Judge whether it is print preview
                //if (rootElement.RectInfo && !rootElement.IsPrintPreview()) {
                //    rootElement.SetBoundsSelectionViewMode(false);
                //}
                // When the editor element size changes, correct the area selection print mask position
                if (rootElement.RectInfo && typeof (rootElement.RectInfo.AdjustBoundsSelectionStyle) == "function") {
                    rootElement.RectInfo.AdjustBoundsSelectionStyle();
                }
                // When the editor element size changes, correct the position of custom comments
                if (rootElement && WriterControl_UI && typeof (WriterControl_UI.AdjustCustomDocumentCommentStyle) == "function") {
                    WriterControl_UI.AdjustCustomDocumentCommentStyle(rootElement);
                }
            }
            //WriterControl_Event.InnerRaiseEvent(rootElement, "EventDocumentResize");
        });
        rootElement.resizeObserver.disconnect(rootElement);
        // Ensure that there is only one event listener on this element
        rootElement.resizeObserver.observe(rootElement);

        rootElement.addEventListener("mousewheel", function (e) {
            if (e.altKey == false && e.ctrlKey == true && e.shiftKey == false) {
                // Ctrl + mouse wheel to zoom
                // var elements = WriterControl_UI.GetPageCanvasElements(this);
                var zoomRate = rootElement.__DCWriterReference.invokeMethod("get_ZoomRate");
                //for (var iCount = 0; iCount < elements.length; iCount++) {
                //    var element = elements[iCount];
                //    if (element.hasAttribute("native-width")) {
                //        zoomRate = parseFloat(element.width)
                //            / parseFloat(element.getAttribute("native-width"));
                //        break;
                //    }
                //}
                //if (isNaN(zoomRate)) {
                //    zoomRate = 1;
                //}
                var newZoomRate = zoomRate;
                if (e.wheelDelta > 0 || e.detail < 0) {
                    // Scroll up
                    newZoomRate = zoomRate + 0.05;
                }
                else {
                    // Scroll down
                    newZoomRate = zoomRate - 0.05;
                }
                rootElement.SetZoomRate(newZoomRate);
                e.preventDefault && e.preventDefault();
                return false;
            }
        }, false);

        rootElement.__DCWriterReference.invokeMethod("Start",
            DCTools20221228.GetServicePageUrl(rootElement),
            DCTools20221228.GetClientID());

        window.setTimeout(async function () {
            // Load time control style here
            WriterControl_DateTimeControl.CreateCalendarCss(rootElement);
            // If not a preview control, then load ruler
            if (rootElement.IsWriterPrintPreviewControlForWASM !== true) {
                rootElement.__DCWriterReference.invokeMethod("CheckForLoadDefaultDocument");
                WriterControl_Rule.UpdateRuleVisible(rootElement);
            } else {
                //// For preview control, do not create ruler but need placeholder
                //let pageContainer = rootElement.querySelector('div[dctype="page-container"]');
                //if (pageContainer && pageContainer.style) {
                //    pageContainer.style.paddingLeft = "24px";
                //    pageContainer.style.paddingTop = "24px";
                //    pageContainer.style.boxSizing = "border-box";
                //    }
            }
            if (!rootElement.AboutControl || !rootElement.firstChild) {
                // Editor creation failed
                if (!!window.WriterControl_OnLoadError && typeof (window.WriterControl_OnLoadError) == "function") {
                    window.WriterControl_OnLoadError.call(rootElement, rootElement);
                }
            }
            if (rootElement.attributes['showtoolbar'] && rootElement.attributes['showtoolbar'].value == 'true') {
                WriterControl_ToolBar.CreateToolBarControl(rootElement);
            }
            WriterControl_Event.RaiseControlEvent(rootElement, "OnLoad");
            if (navigator.clipboard && navigator.clipboard.read) {
                try {
                    const { state } = await navigator.permissions.query({
                        name: "clipboard-read",
                    });
                    if (state == 'prompt' || state == 'denied') {
                        await navigator.clipboard.read();
                    }
                } catch (err) {
                    //console.log(err)
                }
            }
        }, 1);

        // The following is to enable observer mode for the editor's parent element
        const rootElementParentNode = rootElement.parentNode; // Parent element of the control
        // Function to release observer mode
        const disconnectObserver = () => {
            observer.disconnect();
            console.log('Observer mode released');
        };
        // Function executed on monitoring
        const handleMutation = (mutation) => {
            // Judge whether the changed node is a child element
            if (mutation.type === 'childList') {
                // Judge whether the deleted node contains editor dom
                const removedNodes = mutation.removedNodes;
                if (removedNodes.length > 0) {
                    for (let i = 0; i < removedNodes.length; i++) {
                        const item = removedNodes[i];
                        if (item && item.AboutControl) {
                            var AutoDispose = item.getAttribute('AutoDispose');
                            if (AutoDispose === 'true' || AutoDispose === true) {
                                item.Dispose && item.Dispose();
                            }
                        }
                    }
                }
                const childList = mutation.target.children;
                // Release observer mode when there are no child nodes
                if (childList.length === 0) {
                    return disconnectObserver();
                }

                let flag = false;// Used to mark whether there is editor dom in the remaining child nodes
                for (let i = 0; i < childList.length; i++) {
                    if (childList[i] && childList[i].AboutControl) {
                        flag = true;
                        break;
                    }
                }
                (flag === false) && disconnectObserver(); // If there is no editor dom in the child nodes, release observer mode
            }
        };
        const observer = new MutationObserver(function (mutationsList) {
            // This method will be triggered twice, one is when the child node is detached from the parent node, and the other is when the child node is completely deleted. This is how MutationObserver works,
            for (const mutation of mutationsList) {
                handleMutation(mutation);
            }
        });
        observer.observe(rootElementParentNode, { childList: true, subtree: false });// subtree: whether to monitor multi-level child nodes
    }
};
if (window.WriterControl_Main == null) {
    function SetProperties(obj) {
        obj.WriterControl_Main = WriterControl_Main;
        obj.WriterControl_Paint = WriterControl_Paint;
        obj.WriterControl_UI = WriterControl_UI;
        obj.WriterControl_Task = WriterControl_Task;
        obj.WriterControl_Rule = WriterControl_Rule;
        obj.WriterControl_Event = WriterControl_Event;
        obj.DCTools20221228 = DCTools20221228;
        obj.WriterControl_Dialog = WriterControl_Dialog;
        obj.WriterControl_DOMPackage = WriterControl_DOMPackage;
        obj.CreateWriterControlForWASM = obj.WriterControl_Main.CreateWriterControlForWASM;
        //window.CreateTemperatureControlForWASM = WriterControl_Main.CreateWriterControlForWASM;
        obj.WriterControl_EF = WriterControl_EF;
        obj.WriterControl_API = WriterControl_API;
        obj.DisposeDCWriterDocument = obj.WriterControl_API.DisposeDCWriterDocument;
        // Entry point assembly name
        obj.DCWriterEntryPointAssemblyName = "DCSoft.WASM";// "Microsoft.AspNetCore.Components.WebAssembly";// "DCSoft.WASM";
        obj.DCWriterStaticInvokeMethod = function (e, ...t) {
            //if (window.__CurrentDCWriterAPIRecorder != null && typeof (window.__CurrentDCWriterAPIRecorder.LogStaticMethod) == "function") {

            //}
            DotNet.invokeMethod(
                window.DCWriterEntryPointAssemblyName,
                e,
                ...t);
        };
    }
    SetProperties(window);
    var package2 = window.top.__DCWriter5SrcWindow20250912;
    if (package2 != null) {
        SetProperties(package2);
        package2.SrcWindow = window;
        package2.DotNet = DotNet;
    }
}
//**
// * Set SVG code for printing, used to replace the checked image of the radio button
// * @param {string} strKey Image name
// * @param {string} strSVGCdoe SVG code
// */
//window.DCWriterSetCustomShapeSVGCodeForPrint = function (strKey, strSVGCdoe) {
//    DotNet.invokeMethod(
//        window.DCWriterEntryPointAssemblyName,
//        "SetCustomShapeSVGCodeForPrint",
//        strKey,
//        strSVGCdoe);
//};